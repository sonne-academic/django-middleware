worker_processes  2;

events {
  worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;

  # https://security.stackexchange.com/questions/20406/is-http-compression-safe
  gzip  off;

  # important! do not use dhparams below 4096
  # these were taken from https://wiki.mozilla.org/Security/Server_Side_TLS#ffdhe4096
  # the don't have to be kept secret: https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters
  # in case you want to roll your own, execure:
  # openssl dhparam -out /etc/nginx/ffdhe4096.pem 4096
  # this will usually take several hours, it's not guaranteed to find a safe prime of this length *fast*.
  ssl_dhparam /etc/nginx/ffdhe4096.pem;

  # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
  add_header Strict-Transport-Security 'max-age=15768000; includeSubdomains; preload';
  # other security relevant headers
  add_header x-frame-options SAMEORIGIN;
  add_header X-XSS-Protection '1; mode=block';
  add_header X-Content-Type-Options 'nosniff';

  # this is generated by the mozilla ssl config generator
  # https://mozilla.github.io/server-side-tls/ssl-config-generator/
  # this one in particular was generated for nginx 1.14.2 and openssl 1.1.1.a
  ssl_protocols TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;

  # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  # OCSP Stapling ---
  # fetch OCSP records from URL in ssl_certificate and cache them
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8 8.8.4.4 valid=300s;

  server {
    listen       80 default_server;
    listen  [::]:80 default_server;

    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 301 https://$host$request_uri;
  }
  
  # include other configurations (everything ending in '.conf')
  include nginx.d/*.conf;
}
